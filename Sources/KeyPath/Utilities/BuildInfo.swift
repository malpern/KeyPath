import Foundation

struct BuildInfo {
    let version: String
    let build: String
    let git: String
    let date: String

    static func current() -> BuildInfo {
        // Try to read BuildInfo.plist embedded in the app bundle (generated by build script)
        if let url = Bundle.main.url(forResource: "BuildInfo", withExtension: "plist"),
           let data = try? Data(contentsOf: url),
           let dict = try? PropertyListSerialization.propertyList(from: data, options: [], format: nil) as? [String: Any] {
            let version = (dict["CFBundleShortVersionString"] as? String) ?? (Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String) ?? "1.0.0"
            let build = (dict["CFBundleVersion"] as? String) ?? (Bundle.main.infoDictionary?["CFBundleVersion"] as? String) ?? "0"
            let git = (dict["GitCommit"] as? String) ?? "unknown"
            let date = (dict["BuildDate"] as? String) ?? ISO8601DateFormatter().string(from: Date())
            return BuildInfo(version: version, build: build, git: git, date: date)
        }

        // Fallback to bundle info
        let version = (Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String) ?? "1.0.0"
        let build = (Bundle.main.infoDictionary?["CFBundleVersion"] as? String) ?? "0"
        let date = ISO8601DateFormatter().string(from: Date())
        return BuildInfo(version: version, build: build, git: "unknown", date: date)
    }
}

