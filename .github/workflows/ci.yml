name: KeyPath CI

on:
  push:
    branches: [ main, master, another-light-refactor ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: macos-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Install Kanata
      run: |
        echo "üì¶ Installing Kanata..."
        brew install kanata
        echo "‚úÖ Kanata installed: $(which kanata)"
        kanata --version
    
    - name: Build Project
      run: |
        echo "üî® Building project..."
        swift build
        echo "‚úÖ Build completed successfully"
    
    - name: Run Tests (with timeout)
      run: |
        echo "üß™ Running tests..."
        # Set CI environment variables
        export CI_ENVIRONMENT=true
        export KEYPATH_TESTING=false
        
        # Run tests with timeout to prevent hanging
        # gtimeout is GNU timeout on macOS via brew
        if command -v gtimeout &> /dev/null; then
          gtimeout 600 swift test
        else
          # Fallback: run without timeout but let GitHub Actions handle it
          swift test
        fi
        
        echo "‚úÖ Tests completed"
    
    - name: Build Release
      run: |
        echo "üî® Building release version..."
        swift build -c release
        echo "‚úÖ Release build successful"
    
    - name: Check Build Outputs
      run: |
        echo "üîç Checking build outputs..."
        echo "Debug build:"
        ls -la .build/debug/ | head -10 || echo "No debug build found"
        echo ""
        echo "Release build:"
        ls -la .build/release/ | head -10 || echo "No release build found"
        echo "‚úÖ Build verification completed"

  code-quality:
    runs-on: macos-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Tools (optional)
      run: |
        # Install SwiftLint if we want code quality checks
        if ! command -v swiftlint &> /dev/null; then
          echo "üì¶ Installing SwiftLint..."
          brew install swiftlint
        fi
    
    - name: SwiftLint
      run: |
        echo "üîç Running SwiftLint..."
        swiftlint --reporter github-actions-logging || {
          echo "‚ö†Ô∏è SwiftLint found issues, but not failing CI"
          exit 0
        }
        echo "‚úÖ SwiftLint completed"
    
    - name: Check for Critical Issues
      run: |
        echo "üîç Checking for critical code issues..."
        
        # Check for force unwraps in critical files
        if grep -r "!" Sources/KeyPath/Managers/ --include="*.swift" | grep -v "!=" | head -5; then
          echo "‚ö†Ô∏è Found force unwraps in manager files (review recommended)"
        fi
        
        # Check for TODO/FIXME
        if grep -r "TODO\|FIXME" Sources/ --include="*.swift" | head -5; then
          echo "‚ÑπÔ∏è Found TODO/FIXME comments"
        fi
        
        echo "‚úÖ Code quality check completed"