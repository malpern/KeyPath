#!/bin/bash

# Hot Reload Integration Test
# Tests that configuration changes are detected and applied automatically

set -e

echo "🔄 Running hot reload integration tests..."

# Configuration
CONFIG_PATH="/Users/malpern/.config/keypath/keypath.kbd"
BACKUP_PATH="${CONFIG_PATH}.backup"
TEST_LOG="/tmp/hot-reload-test.log"

# Test mappings
ORIGINAL_MAPPING="caps -> esc"
TEST_MAPPING="1 -> 2"

cleanup() {
    echo "🧹 Cleaning up test..."
    if [ -f "$BACKUP_PATH" ]; then
        mv "$BACKUP_PATH" "$CONFIG_PATH"
        echo "✅ Original configuration restored"
    fi
    rm -f "$TEST_LOG"
}

trap cleanup EXIT

echo "📋 Test Setup:"
echo "  Config path: $CONFIG_PATH"
echo "  Current mapping: $ORIGINAL_MAPPING"
echo "  Test mapping: $TEST_MAPPING"
echo ""

# Step 1: Verify Kanata service is running
echo "🔍 Step 1: Checking Kanata service status..."
if ! pgrep -f "kanata.*--cfg.*keypath.kbd" > /dev/null; then
    echo "❌ Kanata service not running with KeyPath config"
    exit 1
fi
echo "✅ Kanata service is running"

# Step 2: Verify TCP server is responding
echo "🔍 Step 2: Checking TCP server connectivity..."
if ! echo "RequestLayerNames" | nc -w 2 127.0.0.1 54141 > /dev/null 2>&1; then
    echo "❌ TCP server not responding on port 54141"
    exit 1
fi
echo "✅ TCP server is responding"

# Step 3: Backup current configuration
echo "🔍 Step 3: Backing up current configuration..."
cp "$CONFIG_PATH" "$BACKUP_PATH"
echo "✅ Configuration backed up"

# Step 4: Get baseline log position
echo "🔍 Step 4: Getting baseline log position..."
BASELINE_LOG_SIZE=$(wc -c < /var/log/kanata.log 2>/dev/null || echo "0")
echo "📊 Baseline log size: $BASELINE_LOG_SIZE bytes"

# Step 5: Generate test configuration
echo "🔍 Step 5: Creating test configuration..."
cat > "$CONFIG_PATH" << EOF
;; Generated by KeyPath Hot Reload Test
;; Test mapping: $TEST_MAPPING
;;
;; SAFETY FEATURES:
;; - process-unmapped-keys no: Only process explicitly mapped keys

(defcfg
  process-unmapped-keys no
)

(defsrc
  1
)

(deflayer base
  2
)
EOF

echo "✅ Test configuration written"

# Step 6: Wait for hot reload detection
echo "🔍 Step 6: Waiting for hot reload detection..."
echo "⏱️  Monitoring for configuration reload (10 second timeout)..."

# Monitor for reload indicators
RELOAD_DETECTED=false
for i in {1..10}; do
    sleep 1
    
    # Check if log size increased (indicates reload activity)
    CURRENT_LOG_SIZE=$(wc -c < /var/log/kanata.log 2>/dev/null || echo "0")
    if [ "$CURRENT_LOG_SIZE" -gt "$BASELINE_LOG_SIZE" ]; then
        echo "📈 Log activity detected (size: $CURRENT_LOG_SIZE bytes)"
        RELOAD_DETECTED=true
        break
    fi
    
    echo -n "."
done
echo ""

if [ "$RELOAD_DETECTED" = "true" ]; then
    echo "✅ Hot reload activity detected"
else
    echo "⚠️  No reload activity detected in logs"
fi

# Step 7: Verify service is still running
echo "🔍 Step 7: Verifying service stability..."
sleep 2

if pgrep -f "kanata.*--cfg.*keypath.kbd" > /dev/null; then
    echo "✅ Kanata service still running after configuration change"
else
    echo "❌ Kanata service stopped after configuration change"
    exit 1
fi

# Step 8: Verify TCP server still responding
echo "🔍 Step 8: Verifying TCP server functionality..."
if echo "RequestLayerNames" | nc -w 2 127.0.0.1 54141 > /dev/null 2>&1; then
    echo "✅ TCP server still responding after reload"
else
    echo "❌ TCP server not responding after reload"
    exit 1
fi

# Step 9: Check recent log entries for reload confirmation
echo "🔍 Step 9: Analyzing reload logs..."
if tail -20 /var/log/kanata.log 2>/dev/null | grep -q "main.*Loading config"; then
    echo "✅ Configuration reload confirmed in logs"
elif tail -20 /var/log/kanata.log 2>/dev/null | grep -q "cfg"; then
    echo "⚠️  Configuration-related activity detected"
else
    echo "⚠️  No explicit reload confirmation in recent logs"
fi

# Summary
echo ""
echo "🎉 Hot Reload Test Results:"
echo "  ✅ Service stability: PASS"
echo "  ✅ TCP server: PASS"
if [ "$RELOAD_DETECTED" = "true" ]; then
    echo "  ✅ Reload detection: PASS"
else
    echo "  ⚠️  Reload detection: INCONCLUSIVE"
fi

echo ""
echo "🏁 Hot reload test completed successfully!"
echo "📝 Note: Original configuration will be restored automatically"