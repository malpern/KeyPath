#!/bin/bash

# Test Reset to Default with TCP Reload
# Verifies that reset to default immediately applies via TCP

set -e

echo "🔄 Testing reset to default with TCP reload..."

# Configuration
CONFIG_PATH="/Users/malpern/.config/keypath/keypath.kbd"
BACKUP_PATH="${CONFIG_PATH}.backup"

cleanup() {
    echo "🧹 Cleaning up test..."
    if [ -f "$BACKUP_PATH" ]; then
        mv "$BACKUP_PATH" "$CONFIG_PATH"
        echo "✅ Original configuration restored"
    fi
}

trap cleanup EXIT

echo "📋 Test Setup:"
echo "  Config path: $CONFIG_PATH"
echo ""

# Step 1: Verify Kanata service is running
echo "🔍 Step 1: Checking Kanata service status..."
if ! pgrep -f "kanata.*--cfg.*keypath.kbd" > /dev/null; then
    echo "❌ Kanata service not running with KeyPath config"
    exit 1
fi
echo "✅ Kanata service is running"

# Step 2: Verify TCP server is responding
echo "🔍 Step 2: Checking TCP server connectivity..."
if ! echo "RequestLayerNames" | nc -w 2 127.0.0.1 54141 > /dev/null 2>&1; then
    echo "❌ TCP server not responding on port 54141"
    exit 1
fi
echo "✅ TCP server is responding"

# Step 3: Backup current configuration
echo "🔍 Step 3: Backing up current configuration..."
cp "$CONFIG_PATH" "$BACKUP_PATH"
echo "✅ Configuration backed up"

# Step 4: Create a custom config (not default)
echo "🔍 Step 4: Creating custom test configuration..."
cat > "$CONFIG_PATH" << EOF
;; Generated by KeyPath
;; Test mapping: space -> tab (custom)
;;
;; SAFETY FEATURES:
;; - process-unmapped-keys no: Only process explicitly mapped keys

(defcfg
  process-unmapped-keys no
)

(defsrc
  space
)

(deflayer base
  tab
)
EOF

echo "✅ Custom test configuration written"

# Step 5: Get baseline log position
echo "🔍 Step 5: Getting baseline log position..."
BASELINE_LOG_SIZE=$(wc -c < /var/log/kanata.log 2>/dev/null || echo "0")
echo "📊 Baseline log size: $BASELINE_LOG_SIZE bytes"

# Step 6: Simulate reset to default via Swift test
echo "🔍 Step 6: Testing reset to default functionality..."
echo "📝 This would normally be triggered by the Settings UI reset button"

# Create a simple Swift script to test the reset function
cat > /tmp/test-reset.swift << 'EOF'
import Foundation

print("🔄 Simulating reset to default...")

// Simulate the reset by writing default config directly
let configPath = "/Users/malpern/.config/keypath/keypath.kbd"
let defaultConfig = """
;; Generated by KeyPath
;; Input: caps -> Output: escape
;;
;; SAFETY FEATURES:
;; - process-unmapped-keys no: Only process explicitly mapped keys

(defcfg
  process-unmapped-keys no
)

(defsrc
  caps
)

(deflayer base
  esc
)
"""

try defaultConfig.write(toFile: configPath, atomically: true, encoding: .utf8)
print("✅ Default config written")

// Send TCP reload command manually
let task = Process()
task.executableURL = URL(fileURLWithPath: "/usr/bin/nc")
task.arguments = ["-w", "2", "127.0.0.1", "54141"]

let pipe = Pipe()
task.standardInput = pipe
task.standardOutput = Pipe()

do {
    try task.run()
    
    // Send reload command
    let reloadCommand = #"{"Reload":{}}"#
    if let data = reloadCommand.data(using: .utf8) {
        pipe.fileHandleForWriting.write(data)
        pipe.fileHandleForWriting.closeFile()
    }
    
    task.waitUntilExit()
    print("✅ TCP reload command sent")
} catch {
    print("⚠️ Failed to send TCP reload: \(error)")
}
EOF

# Run the Swift reset simulation
echo "📦 Running reset simulation..."
swift /tmp/test-reset.swift 2>/dev/null || echo "⚠️ Swift simulation had issues but continuing..."

# Step 7: Wait for reload detection
echo "🔍 Step 7: Monitoring for TCP reload activity..."
RELOAD_DETECTED=false
for i in {1..5}; do
    sleep 1
    
    # Check if log size increased (indicates reload activity)
    CURRENT_LOG_SIZE=$(wc -c < /var/log/kanata.log 2>/dev/null || echo "0")
    if [ "$CURRENT_LOG_SIZE" -gt "$BASELINE_LOG_SIZE" ]; then
        echo "📈 Log activity detected (size: $CURRENT_LOG_SIZE bytes)"
        RELOAD_DETECTED=true
        break
    fi
    
    echo -n "."
done
echo ""

# Step 8: Verify config was reset to default
echo "🔍 Step 8: Verifying configuration reset..."
if grep -q "caps" "$CONFIG_PATH" && grep -q "esc" "$CONFIG_PATH"; then
    echo "✅ Configuration successfully reset to default (caps -> esc)"
else
    echo "❌ Configuration not reset properly"
    exit 1
fi

# Step 9: Verify service stability
echo "🔍 Step 9: Verifying service stability..."
if pgrep -f "kanata.*--cfg.*keypath.kbd" > /dev/null; then
    echo "✅ Kanata service still running after reset"
else
    echo "❌ Kanata service stopped after reset"
    exit 1
fi

# Step 10: Verify TCP server still responding
echo "🔍 Step 10: Verifying TCP server functionality..."
if echo "RequestLayerNames" | nc -w 2 127.0.0.1 54141 > /dev/null 2>&1; then
    echo "✅ TCP server still responding after reset"
else
    echo "❌ TCP server not responding after reset"
    exit 1
fi

# Summary
echo ""
echo "🎉 Reset to Default TCP Reload Test Results:"
echo "  ✅ Service stability: PASS"
echo "  ✅ TCP server: PASS"
echo "  ✅ Config reset: PASS"
if [ "$RELOAD_DETECTED" = "true" ]; then
    echo "  ✅ TCP reload detection: PASS"
else
    echo "  ⚠️  TCP reload detection: INCONCLUSIVE"
fi

echo ""
echo "🏁 Reset with TCP reload test completed successfully!"
echo "📝 Note: Original configuration will be restored automatically"

# Cleanup temp files
rm -f /tmp/test-reset.swift