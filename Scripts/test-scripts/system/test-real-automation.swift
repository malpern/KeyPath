#!/usr/bin/env swift
import Foundation

// Simple script to trigger the real UI automation test
print("🤖 [RealUIAutomation] ========== TRIGGERING REAL UI SAVE ==========")
print("🤖 [RealUIAutomation] This script will call the actual KeyPath save mechanism")

let startTime = Date()

// Instead of calling the Swift code directly (which has dependencies),
// let's monitor what happens when we make the configuration change
// and see the hot reload sequence in the logs

print("💾 [RealUIAutomation] Step 1: About to modify config to add 1→2 mapping")
print("🔍 [RealUIAutomation] You should listen for:")
print("  - 'ting' sound (file save)")
print("  - 'glass' sound (hot reload)")

// Read current config
if let currentConfig = try? String(contentsOfFile: "/Users/malpern/.config/keypath/keypath.kbd") {
    print("📄 [RealUIAutomation] Current config:")
    print(currentConfig)
}

print("⏰ [RealUIAutomation] Waiting 2 seconds before modification...")
Thread.sleep(forTimeInterval: 2.0)

// Now make the actual config change that would happen through the UI
let newConfig = """
;; Generated by KeyPath
;; Input: caps -> Output: escape
;; Input: 1 -> Output: 2
;;
;; SAFETY FEATURES:
;; - process-unmapped-keys no: Only process explicitly mapped keys

(defcfg
  process-unmapped-keys no
)

(defsrc
  caps 1
)

(deflayer base
  esc 2
)
"""

do {
    try newConfig.write(toFile: "/Users/malpern/.config/keypath/keypath.kbd", atomically: true, encoding: .utf8)
    let saveTime = Date()
    let saveDuration = saveTime.timeIntervalSince(startTime)

    print("💾 [RealUIAutomation] ========== CONFIG FILE SAVED ==========")
    print("🕐 [RealUIAutomation] File save took: \(String(format: "%.3f", saveDuration))s")
    print("🔍 [RealUIAutomation] Did you hear the 'ting' sound?")

    print("⏰ [RealUIAutomation] Waiting for hot reload...")
    Thread.sleep(forTimeInterval: 3.0)

    let endTime = Date()
    let totalDuration = endTime.timeIntervalSince(startTime)

    print("🤖 [RealUIAutomation] ========== REAL UI AUTOMATION COMPLETE ==========")
    print("🕐 [RealUIAutomation] Total process took: \(String(format: "%.3f", totalDuration))s")
    print("🔍 [RealUIAutomation] Did you hear the 'glass' sound for hot reload?")
    print("🎯 [RealUIAutomation] Please test: Type '1' - does it produce '2'?")

} catch {
    print("❌ [RealUIAutomation] Failed to save config: \(error)")
}
